{"ast":null,"code":"var _jsxFileName = \"/Users/pilatus/Desktop/player/song-list/src/contexts/SongContext.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport uuid from 'uuid/v4';\nexport const SongContext = createContext();\n\nconst SongContextProvider = props => {\n  const [songs, setSongs] = useState([{\n    id: uuid(),\n    title: 'Bad',\n    artist: 'Michael Jackson',\n    like: true\n  }, {\n    id: uuid(),\n    title: 'Dumb',\n    artist: ' Nirvana',\n    like: false\n  }, {\n    id: uuid(),\n    title: 'Aquarela',\n    artist: 'Toquinho',\n    like: true\n  }, {\n    id: uuid(),\n    title: 'Paranoid',\n    artist: 'Black Sabbath',\n    like: false\n  }]);\n  const [like, setLike] = useState(false); // const toggleLike = index => {\n  //   setLike(!like);\n  // };\n\n  const toggleLike = songId => {\n    const updatedSongs = songs.map(song => song.id === songId ? { ...song,\n      like: !song.like\n    } : song);\n    setSongs(updatedSongs);\n  };\n\n  const removeSong = id => {\n    setSongs(songs.filter(song => song.id !== id));\n  };\n\n  const addSong = () => {};\n\n  return React.createElement(SongContext.Provider, {\n    value: {\n      songs,\n      toggleLike,\n      removeSong\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default SongContextProvider;","map":{"version":3,"sources":["/Users/pilatus/Desktop/player/song-list/src/contexts/SongContext.js"],"names":["React","createContext","useState","useEffect","uuid","SongContext","SongContextProvider","props","songs","setSongs","id","title","artist","like","setLike","toggleLike","songId","updatedSongs","map","song","removeSong","filter","addSong","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,EAAjC;;AAEP,MAAMK,mBAAmB,GAAGC,KAAK,IAAI;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CACjC;AAAEQ,IAAAA,EAAE,EAAEN,IAAI,EAAV;AAAcO,IAAAA,KAAK,EAAE,KAArB;AAA4BC,IAAAA,MAAM,EAAE,iBAApC;AAAuDC,IAAAA,IAAI,EAAE;AAA7D,GADiC,EAEjC;AAAEH,IAAAA,EAAE,EAAEN,IAAI,EAAV;AAAcO,IAAAA,KAAK,EAAE,MAArB;AAA6BC,IAAAA,MAAM,EAAE,UAArC;AAAiDC,IAAAA,IAAI,EAAE;AAAvD,GAFiC,EAGjC;AAAEH,IAAAA,EAAE,EAAEN,IAAI,EAAV;AAAcO,IAAAA,KAAK,EAAE,UAArB;AAAiCC,IAAAA,MAAM,EAAE,UAAzC;AAAqDC,IAAAA,IAAI,EAAE;AAA3D,GAHiC,EAIjC;AAAEH,IAAAA,EAAE,EAAEN,IAAI,EAAV;AAAcO,IAAAA,KAAK,EAAE,UAArB;AAAiCC,IAAAA,MAAM,EAAE,eAAzC;AAA0DC,IAAAA,IAAI,EAAE;AAAhE,GAJiC,CAAD,CAAlC;AAMA,QAAM,CAACA,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,KAAD,CAAhC,CAPmC,CASnC;AACA;AACA;;AAEA,QAAMa,UAAU,GAAGC,MAAM,IAAI;AAC3B,UAAMC,YAAY,GAAGT,KAAK,CAACU,GAAN,CAAUC,IAAI,IACjCA,IAAI,CAACT,EAAL,KAAYM,MAAZ,GAAqB,EAAE,GAAGG,IAAL;AAAWN,MAAAA,IAAI,EAAE,CAACM,IAAI,CAACN;AAAvB,KAArB,GAAqDM,IADlC,CAArB;AAGAV,IAAAA,QAAQ,CAACQ,YAAD,CAAR;AACD,GALD;;AAOA,QAAMG,UAAU,GAAGV,EAAE,IAAI;AACvBD,IAAAA,QAAQ,CAACD,KAAK,CAACa,MAAN,CAAaF,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAYA,EAAjC,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMY,OAAO,GAAG,MAAM,CAAE,CAAxB;;AAEA,SACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEd,MAAAA,KAAF;AAASO,MAAAA,UAAT;AAAqBK,MAAAA;AAArB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,KAAK,CAACgB,QADT,CADF;AAKD,CA/BD;;AAiCA,eAAejB,mBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport uuid from 'uuid/v4';\n\nexport const SongContext = createContext();\n\nconst SongContextProvider = props => {\n  const [songs, setSongs] = useState([\n    { id: uuid(), title: 'Bad', artist: 'Michael Jackson', like: true },\n    { id: uuid(), title: 'Dumb', artist: ' Nirvana', like: false },\n    { id: uuid(), title: 'Aquarela', artist: 'Toquinho', like: true },\n    { id: uuid(), title: 'Paranoid', artist: 'Black Sabbath', like: false }\n  ]);\n  const [like, setLike] = useState(false);\n\n  // const toggleLike = index => {\n  //   setLike(!like);\n  // };\n\n  const toggleLike = songId => {\n    const updatedSongs = songs.map(song =>\n      song.id === songId ? { ...song, like: !song.like } : song\n    );\n    setSongs(updatedSongs);\n  };\n\n  const removeSong = id => {\n    setSongs(songs.filter(song => song.id !== id));\n  };\n\n  const addSong = () => {};\n\n  return (\n    <SongContext.Provider value={{ songs, toggleLike, removeSong }}>\n      {props.children}\n    </SongContext.Provider>\n  );\n};\n\nexport default SongContextProvider;\n"]},"metadata":{},"sourceType":"module"}