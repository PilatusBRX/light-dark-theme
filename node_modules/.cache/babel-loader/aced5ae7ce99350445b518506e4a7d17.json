{"ast":null,"code":"var _jsxFileName = \"/Users/pilatus/Desktop/player/song-list/src/contexts/SongContext.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport uuid from 'uuid/v4';\nexport const SongContext = createContext();\n\nconst SongContextProvider = props => {\n  const [songs, setSongs] = useState(() => {\n    const localData = localStorage.getItem('songs');\n    return localData ? JSON.parse(localData) : [{\n      id: uuid(),\n      title: 'Bad',\n      artist: 'Michael Jackson',\n      like: true\n    }, {\n      id: uuid(),\n      title: 'Dumb',\n      artist: ' Nirvana',\n      like: false\n    }, {\n      id: uuid(),\n      title: 'Aquarela',\n      artist: 'Toquinho',\n      like: true\n    }, {\n      id: uuid(),\n      title: 'Paranoid',\n      artist: 'Black Sabbath',\n      like: false\n    }];\n  });\n  useEffect(() => {\n    localStorage.setItem('songs', JSON.stringify(songs));\n  }, [songs]); //toggleLike\n\n  const toggleLike = songId => {\n    const updatedSongs = songs.map(song => song.id === songId ? { ...song,\n      like: !song.like\n    } : song);\n    setSongs(updatedSongs);\n  }; //removeSong\n\n\n  const removeSong = id => {\n    setSongs(songs.filter(song => song.id !== id));\n  }; //addSong\n\n\n  const addSong = (title, artist) => {\n    setSongs([...songs, {\n      title,\n      artist,\n      id: uuid(),\n      like: false\n    }]);\n  };\n\n  return React.createElement(SongContext.Provider, {\n    value: {\n      songs,\n      toggleLike,\n      removeSong,\n      addSong\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default SongContextProvider;","map":{"version":3,"sources":["/Users/pilatus/Desktop/player/song-list/src/contexts/SongContext.js"],"names":["React","createContext","useState","useEffect","uuid","SongContext","SongContextProvider","props","songs","setSongs","localData","localStorage","getItem","JSON","parse","id","title","artist","like","setItem","stringify","toggleLike","songId","updatedSongs","map","song","removeSong","filter","addSong","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,EAAjC;;AAEP,MAAMK,mBAAmB,GAAGC,KAAK,IAAI;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,MAAM;AACvC,UAAMQ,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,WAAOF,SAAS,GACZG,IAAI,CAACC,KAAL,CAAWJ,SAAX,CADY,GAEZ,CACE;AAAEK,MAAAA,EAAE,EAAEX,IAAI,EAAV;AAAcY,MAAAA,KAAK,EAAE,KAArB;AAA4BC,MAAAA,MAAM,EAAE,iBAApC;AAAuDC,MAAAA,IAAI,EAAE;AAA7D,KADF,EAEE;AAAEH,MAAAA,EAAE,EAAEX,IAAI,EAAV;AAAcY,MAAAA,KAAK,EAAE,MAArB;AAA6BC,MAAAA,MAAM,EAAE,UAArC;AAAiDC,MAAAA,IAAI,EAAE;AAAvD,KAFF,EAGE;AAAEH,MAAAA,EAAE,EAAEX,IAAI,EAAV;AAAcY,MAAAA,KAAK,EAAE,UAArB;AAAiCC,MAAAA,MAAM,EAAE,UAAzC;AAAqDC,MAAAA,IAAI,EAAE;AAA3D,KAHF,EAIE;AACEH,MAAAA,EAAE,EAAEX,IAAI,EADV;AAEEY,MAAAA,KAAK,EAAE,UAFT;AAGEC,MAAAA,MAAM,EAAE,eAHV;AAIEC,MAAAA,IAAI,EAAE;AAJR,KAJF,CAFJ;AAaD,GAfiC,CAAlC;AAgBAf,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACO,SAAL,CAAeZ,KAAf,CAA9B;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CAjBmC,CAqBnC;;AACA,QAAMa,UAAU,GAAGC,MAAM,IAAI;AAC3B,UAAMC,YAAY,GAAGf,KAAK,CAACgB,GAAN,CAAUC,IAAI,IACjCA,IAAI,CAACV,EAAL,KAAYO,MAAZ,GAAqB,EAAE,GAAGG,IAAL;AAAWP,MAAAA,IAAI,EAAE,CAACO,IAAI,CAACP;AAAvB,KAArB,GAAqDO,IADlC,CAArB;AAGAhB,IAAAA,QAAQ,CAACc,YAAD,CAAR;AACD,GALD,CAtBmC,CA4BnC;;;AACA,QAAMG,UAAU,GAAGX,EAAE,IAAI;AACvBN,IAAAA,QAAQ,CAACD,KAAK,CAACmB,MAAN,CAAaF,IAAI,IAAIA,IAAI,CAACV,EAAL,KAAYA,EAAjC,CAAD,CAAR;AACD,GAFD,CA7BmC,CAiCnC;;;AACA,QAAMa,OAAO,GAAG,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AACjCR,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW;AAAEQ,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBF,MAAAA,EAAE,EAAEX,IAAI,EAAzB;AAA6Bc,MAAAA,IAAI,EAAE;AAAnC,KAAX,CAAD,CAAR;AACD,GAFD;;AAIA,SACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEV,MAAAA,KAAF;AAASa,MAAAA,UAAT;AAAqBK,MAAAA,UAArB;AAAiCE,MAAAA;AAAjC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGrB,KAAK,CAACsB,QADT,CADF;AAKD,CA3CD;;AA6CA,eAAevB,mBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport uuid from 'uuid/v4';\nexport const SongContext = createContext();\n\nconst SongContextProvider = props => {\n  const [songs, setSongs] = useState(() => {\n    const localData = localStorage.getItem('songs');\n    return localData\n      ? JSON.parse(localData)\n      : [\n          { id: uuid(), title: 'Bad', artist: 'Michael Jackson', like: true },\n          { id: uuid(), title: 'Dumb', artist: ' Nirvana', like: false },\n          { id: uuid(), title: 'Aquarela', artist: 'Toquinho', like: true },\n          {\n            id: uuid(),\n            title: 'Paranoid',\n            artist: 'Black Sabbath',\n            like: false\n          }\n        ];\n  });\n  useEffect(() => {\n    localStorage.setItem('songs', JSON.stringify(songs));\n  }, [songs]);\n\n  //toggleLike\n  const toggleLike = songId => {\n    const updatedSongs = songs.map(song =>\n      song.id === songId ? { ...song, like: !song.like } : song\n    );\n    setSongs(updatedSongs);\n  };\n  //removeSong\n  const removeSong = id => {\n    setSongs(songs.filter(song => song.id !== id));\n  };\n\n  //addSong\n  const addSong = (title, artist) => {\n    setSongs([...songs, { title, artist, id: uuid(), like: false }]);\n  };\n\n  return (\n    <SongContext.Provider value={{ songs, toggleLike, removeSong, addSong }}>\n      {props.children}\n    </SongContext.Provider>\n  );\n};\n\nexport default SongContextProvider;\n"]},"metadata":{},"sourceType":"module"}