{"ast":null,"code":"var _jsxFileName = \"/Users/pilatus/Desktop/player/song-list/src/contexts/SongContext.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport uuid from 'uuid/v4';\nexport const SongContext = createContext();\n\nconst SongContextProvider = props => {\n  const [songs, setSongs] = useState([]);\n  const [like, setLike] = useState(false); // const toggleLike = index => {\n  //   setLike(!like);\n  // };\n\n  const toggleLike = songId => {\n    const updatedSongs = songs.map(song => song.id === songId ? { ...song,\n      like: !song.like\n    } : song);\n    setSongs(updatedSongs);\n  };\n\n  const removeSong = id => {\n    setSongs(songs.filter(song => song.id !== id));\n  };\n\n  const addSong = (title, artist) => {\n    setSongs([...songs, {\n      title,\n      artist,\n      id: uuid(),\n      like: false\n    }]);\n  };\n\n  return React.createElement(SongContext.Provider, {\n    value: {\n      songs,\n      toggleLike,\n      removeSong,\n      addSong\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default SongContextProvider;","map":{"version":3,"sources":["/Users/pilatus/Desktop/player/song-list/src/contexts/SongContext.js"],"names":["React","createContext","useState","useEffect","uuid","SongContext","SongContextProvider","props","songs","setSongs","like","setLike","toggleLike","songId","updatedSongs","map","song","id","removeSong","filter","addSong","title","artist","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,EAAjC;;AAEP,MAAMK,mBAAmB,GAAGC,KAAK,IAAI;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,KAAD,CAAhC,CAFmC,CAInC;AACA;AACA;;AAEA,QAAMU,UAAU,GAAGC,MAAM,IAAI;AAC3B,UAAMC,YAAY,GAAGN,KAAK,CAACO,GAAN,CAAUC,IAAI,IACjCA,IAAI,CAACC,EAAL,KAAYJ,MAAZ,GAAqB,EAAE,GAAGG,IAAL;AAAWN,MAAAA,IAAI,EAAE,CAACM,IAAI,CAACN;AAAvB,KAArB,GAAqDM,IADlC,CAArB;AAGAP,IAAAA,QAAQ,CAACK,YAAD,CAAR;AACD,GALD;;AAOA,QAAMI,UAAU,GAAGD,EAAE,IAAI;AACvBR,IAAAA,QAAQ,CAACD,KAAK,CAACW,MAAN,CAAaH,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAjC,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjCb,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW;AAAEa,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBL,MAAAA,EAAE,EAAEb,IAAI,EAAzB;AAA6BM,MAAAA,IAAI,EAAE;AAAnC,KAAX,CAAD,CAAR;AACD,GAFD;;AAIA,SACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEF,MAAAA,KAAF;AAASI,MAAAA,UAAT;AAAqBM,MAAAA,UAArB;AAAiCE,MAAAA;AAAjC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,KAAK,CAACgB,QADT,CADF;AAKD,CA5BD;;AA8BA,eAAejB,mBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport uuid from 'uuid/v4';\n\nexport const SongContext = createContext();\n\nconst SongContextProvider = props => {\n  const [songs, setSongs] = useState([]);\n  const [like, setLike] = useState(false);\n\n  // const toggleLike = index => {\n  //   setLike(!like);\n  // };\n\n  const toggleLike = songId => {\n    const updatedSongs = songs.map(song =>\n      song.id === songId ? { ...song, like: !song.like } : song\n    );\n    setSongs(updatedSongs);\n  };\n\n  const removeSong = id => {\n    setSongs(songs.filter(song => song.id !== id));\n  };\n\n  const addSong = (title, artist) => {\n    setSongs([...songs, { title, artist, id: uuid(), like: false }]);\n  };\n\n  return (\n    <SongContext.Provider value={{ songs, toggleLike, removeSong, addSong }}>\n      {props.children}\n    </SongContext.Provider>\n  );\n};\n\nexport default SongContextProvider;\n"]},"metadata":{},"sourceType":"module"}